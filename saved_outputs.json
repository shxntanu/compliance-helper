[{"heading": "1.4 Ensure Install of macOS Updates Is Enabled (Automated)", "response": "```bash\n#!/bin/bash\n\n# Check if macOS updates are automatically installed\n/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS \n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.SoftwareUpdate')\\\n.objectForKey('AutomaticallyInstallMacOSUpdates').js \nEOS \n\nif [[ $? -eq 0 ]]; then\n  echo \"macOS updates are automatically installed.\"\nelse\n  echo \"macOS updates are NOT automatically installed.\"\n  echo \"Enabling automatic macOS updates...\"\n  /usr/bin/sudo /usr/bin/defaults write /Library/Preferences/com.apple.SoftwareUpdate AutomaticallyInstallMacOSUpdates -bool TRUE\nfi\n```"}, {"heading": "2.1.1.1 Audit iCloud Keychain (Manual)", "response": "## Audit:\n\n**Terminal Method:**\n\n```bash\n/usr/bin/sudo /usr/bin/osascript -l JavaScript << EOS \n$.NSUserDefaults.alloc.initWithSuiteName('com.apple.applicationaccess')\\ \n.objectForKey('allowCloudKeychainSync').js \nEOS\n```\n\n**Output Interpretation:**\n\n* **false:** iCloud Keychain Sync is disabled.\n* **true:** iCloud Keychain Sync is enabled.\n\n## Remediation:\n\n**Profile Method:**\n\n1. Create or edit a configuration profile with the following information:\n   * PayloadType string: `com.apple.applicationaccess`\n   * Key: `allowCloudKeychainSync`\n   * Value: `<true/>` to allow iCloud keychain syncing, or `<false/>` to disable it, based on your organization's requirements.\n\n**Note:** The profile method is the preferred method as it sets a system-wide setting and is more secure than individual user settings.\n\n## Verify Individual Users:\n\n**Terminal Method:**\n\nFor each user, run the following command:\n\n```bash\n/usr/bin/sudo -u <username> /usr/bin/defaults read /Users/<username>/Library/Preferences/MobileMeAccounts | grep -B 1 KEYCHAIN_SYNC\n```\n\n**Output Interpretation:**\n\n* **Enabled = 0:** iCloud Keychain Sync is disabled.\n* **Enabled = 1:** iCloud Keychain Sync is enabled. \n\n## Remediation for Individual Users:\n\n**Graphical Method:**\n\n1. Open **System Settings**.\n2. Select **Apple ID**.\n3. Select **iCloud**.\n4. Set **Keychain** to meet your organization's requirements (enabled or disabled). \n"}, {"heading": "1.1.2 (L1) Ensure 'Maximum password age' is set to '365 or fewer days, but not 0' (Automated)", "response": "## Remediation Steps (GUI)\n\n1. Open **Group Policy Management Console (GPMC)**.\n2. Navigate to the **Default Domain Policy** object.\n3. Right-click on the policy and select **Edit**.\n4. Navigate to **Computer Configuration -> Policies -> Windows Settings -> Security Settings -> Account Policies -> Password Policy**.\n5. Double-click on **Maximum password age**.\n6. Set the value to a number between **1 and 365**.\n7. Click **Apply** and then **OK**.\n\n## Auditing Steps (GUI)\n\n1. Open **Group Policy Management Console (GPMC)**.\n2. Navigate to the **Default Domain Policy** object.\n3. Right-click on the policy and select **Edit**.\n4. Navigate to **Computer Configuration -> Policies -> Windows Settings -> Security Settings -> Account Policies -> Password Policy**.\n5. Double-click on **Maximum password age**.\n6. Verify the value is set to a number between **1 and 365**. \n"}, {"heading": "1.1.2.3 Configure /home", "response": "```bash\n#!/bin/bash\n\n# Audit\n# Check if /home is owned by root\nif [[ $(stat -c %U /home) != \"root\" ]]; then\n  echo \"ERROR: /home is not owned by root.\"\nfi\n\n# Check if /home has the correct permissions\nif [[ $(stat -c %a /home) != \"drwxr-xr-x\" ]]; then\n  echo \"ERROR: /home does not have the correct permissions.\"\nfi\n\n# Remediation\n# Set the owner of /home to root\nchown root:root /home\n\n# Set the permissions of /home to drwxr-xr-x\nchmod 755 /home\n\n# Verify\n# Check if /home is owned by root\nif [[ $(stat -c %U /home) != \"root\" ]]; then\n  echo \"ERROR: /home is not owned by root.\"\nfi\n\n# Check if /home has the correct permissions\nif [[ $(stat -c %a /home) != \"drwxr-xr-x\" ]]; then\n  echo \"ERROR: /home does not have the correct permissions.\"\nfi\n```"}, {"heading": "1 Users with Administrative privileges must have separate accounts for administrative duties and normal operational tasks.", "response": "```bash\n#!/bin/bash\n\n# This script audits for users with administrative privileges who do not have separate accounts.\n\n# Define the group that represents administrative privileges (adjust as needed)\nadmin_group=\"sudo\" \n\n# Get a list of users with administrative privileges\nadmin_users=$(groups \"$admin_group\" | cut -d: -f1)\n\n# Iterate over each user\nfor user in $admin_users; do\n  # Get the user's primary group\n  primary_group=$(id -Gn \"$user\" | awk '{print $2}')\n\n  # Check if the user's primary group is the administrative group\n  if [[ \"$primary_group\" == \"$admin_group\" ]]; then\n    echo \"WARNING: User '$user' has administrative privileges as their primary group.\"\n    echo \"  Remediation: Create a separate account for standard user functions.\"\n  fi\ndone\n```"}]